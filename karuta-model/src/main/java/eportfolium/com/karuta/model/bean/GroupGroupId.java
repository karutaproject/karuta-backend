/* =======================================================
	Copyright 2020 - ePortfolium - Licensed under the
	Educational Community License, Version 2.0 (the "License"); you may
	not use this file except in compliance with the License. You may
	obtain a copy of the License at

	http://www.osedu.org/licenses/ECL-2.0

	Unless required by applicable law or agreed to in writing,
	software distributed under the License is distributed on an "AS IS"
	BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express
	or implied. See the License for the specific language governing
	permissions and limitations under the License.
   ======================================================= */

package eportfolium.com.karuta.model.bean;
// Generated 13 juin 2019 19:14:13 by Hibernate Tools 5.2.10.Final

import java.io.Serializable;

import javax.persistence.Embeddable;
import javax.persistence.ManyToOne;

/**
 * GroupGroupId generated by hbm2java
 */
@Embeddable
public class GroupGroupId implements Serializable {

	private static final long serialVersionUID = 2095885409926253640L;

	private GroupInfo group;
	private GroupInfo childGroup;

	public GroupGroupId() {
	}

	public GroupGroupId(GroupInfo group, GroupInfo childGroup) {
		this.group = group;
		this.childGroup = childGroup;
	}

	@ManyToOne
	public GroupInfo getGroup() {
		return this.group;
	}

	public void setGroup(GroupInfo group) {
		this.group = group;
	}

	@ManyToOne
	public GroupInfo getChildGroup() {
		return this.childGroup;
	}

	public void setChildGroup(GroupInfo childGroup) {
		this.childGroup = childGroup;
	}

	@Override
	public int hashCode() {
		final int prime = 31;
		int result = 1;
		result = prime * result + ((childGroup == null) ? 0 : childGroup.hashCode());
		result = prime * result + ((group == null) ? 0 : group.hashCode());
		return result;
	}

	@Override
	public boolean equals(Object obj) {
		if (this == obj)
			return true;
		if (obj == null)
			return false;
		if (getClass() != obj.getClass())
			return false;
		GroupGroupId other = (GroupGroupId) obj;
		if (childGroup == null) {
			if (other.childGroup != null)
				return false;
		} else if (!childGroup.equals(other.childGroup))
			return false;
		if (group == null) {
			if (other.group != null)
				return false;
		} else if (!group.equals(other.group))
			return false;
		return true;
	}

}
